// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: protos/scoring-service/scoring-service.proto

package scoringpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ScoringService_CreateScore_FullMethodName            = "/ScoringService/CreateScore"
	ScoringService_UpdateScore_FullMethodName            = "/ScoringService/UpdateScore"
	ScoringService_GetScore_FullMethodName               = "/ScoringService/GetScore"
	ScoringService_GetScoresByEvent_FullMethodName       = "/ScoringService/GetScoresByEvent"
	ScoringService_GetScoresByParticipant_FullMethodName = "/ScoringService/GetScoresByParticipant"
	ScoringService_DeleteScore_FullMethodName            = "/ScoringService/DeleteScore"
)

// ScoringServiceClient is the client API for ScoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoringServiceClient interface {
	CreateScore(ctx context.Context, in *CreateScoreRequest, opts ...grpc.CallOption) (*Score, error)
	UpdateScore(ctx context.Context, in *UpdateScoreRequest, opts ...grpc.CallOption) (*Score, error)
	GetScore(ctx context.Context, in *GetScoreRequest, opts ...grpc.CallOption) (*Score, error)
	GetScoresByEvent(ctx context.Context, in *GetScoresByEventRequest, opts ...grpc.CallOption) (*ScoreList, error)
	GetScoresByParticipant(ctx context.Context, in *GetScoresByParticipantRequest, opts ...grpc.CallOption) (*ScoreList, error)
	DeleteScore(ctx context.Context, in *DeleteScoreRequest, opts ...grpc.CallOption) (*DeleteScoreResponse, error)
}

type scoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScoringServiceClient(cc grpc.ClientConnInterface) ScoringServiceClient {
	return &scoringServiceClient{cc}
}

func (c *scoringServiceClient) CreateScore(ctx context.Context, in *CreateScoreRequest, opts ...grpc.CallOption) (*Score, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Score)
	err := c.cc.Invoke(ctx, ScoringService_CreateScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoringServiceClient) UpdateScore(ctx context.Context, in *UpdateScoreRequest, opts ...grpc.CallOption) (*Score, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Score)
	err := c.cc.Invoke(ctx, ScoringService_UpdateScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoringServiceClient) GetScore(ctx context.Context, in *GetScoreRequest, opts ...grpc.CallOption) (*Score, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Score)
	err := c.cc.Invoke(ctx, ScoringService_GetScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoringServiceClient) GetScoresByEvent(ctx context.Context, in *GetScoresByEventRequest, opts ...grpc.CallOption) (*ScoreList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScoreList)
	err := c.cc.Invoke(ctx, ScoringService_GetScoresByEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoringServiceClient) GetScoresByParticipant(ctx context.Context, in *GetScoresByParticipantRequest, opts ...grpc.CallOption) (*ScoreList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScoreList)
	err := c.cc.Invoke(ctx, ScoringService_GetScoresByParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoringServiceClient) DeleteScore(ctx context.Context, in *DeleteScoreRequest, opts ...grpc.CallOption) (*DeleteScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScoreResponse)
	err := c.cc.Invoke(ctx, ScoringService_DeleteScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoringServiceServer is the server API for ScoringService service.
// All implementations must embed UnimplementedScoringServiceServer
// for forward compatibility
type ScoringServiceServer interface {
	CreateScore(context.Context, *CreateScoreRequest) (*Score, error)
	UpdateScore(context.Context, *UpdateScoreRequest) (*Score, error)
	GetScore(context.Context, *GetScoreRequest) (*Score, error)
	GetScoresByEvent(context.Context, *GetScoresByEventRequest) (*ScoreList, error)
	GetScoresByParticipant(context.Context, *GetScoresByParticipantRequest) (*ScoreList, error)
	DeleteScore(context.Context, *DeleteScoreRequest) (*DeleteScoreResponse, error)
	mustEmbedUnimplementedScoringServiceServer()
}

// UnimplementedScoringServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScoringServiceServer struct {
}

func (UnimplementedScoringServiceServer) CreateScore(context.Context, *CreateScoreRequest) (*Score, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScore not implemented")
}
func (UnimplementedScoringServiceServer) UpdateScore(context.Context, *UpdateScoreRequest) (*Score, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScore not implemented")
}
func (UnimplementedScoringServiceServer) GetScore(context.Context, *GetScoreRequest) (*Score, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScore not implemented")
}
func (UnimplementedScoringServiceServer) GetScoresByEvent(context.Context, *GetScoresByEventRequest) (*ScoreList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoresByEvent not implemented")
}
func (UnimplementedScoringServiceServer) GetScoresByParticipant(context.Context, *GetScoresByParticipantRequest) (*ScoreList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoresByParticipant not implemented")
}
func (UnimplementedScoringServiceServer) DeleteScore(context.Context, *DeleteScoreRequest) (*DeleteScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScore not implemented")
}
func (UnimplementedScoringServiceServer) mustEmbedUnimplementedScoringServiceServer() {}

// UnsafeScoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoringServiceServer will
// result in compilation errors.
type UnsafeScoringServiceServer interface {
	mustEmbedUnimplementedScoringServiceServer()
}

func RegisterScoringServiceServer(s grpc.ServiceRegistrar, srv ScoringServiceServer) {
	s.RegisterService(&ScoringService_ServiceDesc, srv)
}

func _ScoringService_CreateScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringServiceServer).CreateScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoringService_CreateScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringServiceServer).CreateScore(ctx, req.(*CreateScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoringService_UpdateScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringServiceServer).UpdateScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoringService_UpdateScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringServiceServer).UpdateScore(ctx, req.(*UpdateScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoringService_GetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringServiceServer).GetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoringService_GetScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringServiceServer).GetScore(ctx, req.(*GetScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoringService_GetScoresByEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScoresByEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringServiceServer).GetScoresByEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoringService_GetScoresByEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringServiceServer).GetScoresByEvent(ctx, req.(*GetScoresByEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoringService_GetScoresByParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScoresByParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringServiceServer).GetScoresByParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoringService_GetScoresByParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringServiceServer).GetScoresByParticipant(ctx, req.(*GetScoresByParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoringService_DeleteScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringServiceServer).DeleteScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoringService_DeleteScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringServiceServer).DeleteScore(ctx, req.(*DeleteScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScoringService_ServiceDesc is the grpc.ServiceDesc for ScoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ScoringService",
	HandlerType: (*ScoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScore",
			Handler:    _ScoringService_CreateScore_Handler,
		},
		{
			MethodName: "UpdateScore",
			Handler:    _ScoringService_UpdateScore_Handler,
		},
		{
			MethodName: "GetScore",
			Handler:    _ScoringService_GetScore_Handler,
		},
		{
			MethodName: "GetScoresByEvent",
			Handler:    _ScoringService_GetScoresByEvent_Handler,
		},
		{
			MethodName: "GetScoresByParticipant",
			Handler:    _ScoringService_GetScoresByParticipant_Handler,
		},
		{
			MethodName: "DeleteScore",
			Handler:    _ScoringService_DeleteScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/scoring-service/scoring-service.proto",
}
